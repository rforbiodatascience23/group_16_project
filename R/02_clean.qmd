---
format:
  revealjs:
    embed-resources: true
---
```{r}
library(tidyverse)
```

2.  We read the TSV file containing our data into an R data frame, considering specific strings as missing values. To create a clean dataset, we removed all missing values.

```{r}
#| message: false
data <- read_tsv("../data/01_dat_load.tsv", na= c("", "NA", "N/A", "missing", "?"))
data <- drop_na(data)
```

3.  In the next step we assigned new column names to the **`data`** data frame, specifying names for each column.

**Age**: Age of the individual

**Gender (sex)**: 0 for female, 1 for male

**Chest Pain (cp)**: Type of chest pain

**Resting Blood Pressure (trestbps)**: Resting blood pressure

**Serum Cholesterol (chol)**: Serum cholesterol level

**Fasting Blood Sugar (fbs)**: Fasting blood sugar

**Resting Electrocardiographic Results (restecg)**: Resting electrocardiographic results

**Maximum Heart Rate Achieved (thalach)**: Maximum heart rate achieved

**Exercise-Induced Angina (exang)**: 0 for no, 1 for yes

**ST Depression Induced by Exercise (oldpeak)**: ST depression induced by exercise

**Slope of the Peak Exercise (slope)**: Slope of the peak exercise

**Number of Major Vessels Colored by Fluoroscopy (ca)**: Number of major vessels colored by fluoroscopy

**Thalassemia Type (thal)**: Thalassemia type

**Presence of Heart Disease (num)**: 0 for no, 1 for yes

```{r}
colnames(data) <- c('age','sex','cp','trestbps','chol','fbs','restecg','thalach','exang','oldpeak','slope','ca','thal','num') 
```

4.  Now, we clean the data by converting all relevant columns to more interpretable labels. This includes transforming numeric codes into descriptive terms for chest pain types, gender, exercise-induced angina, slope, fasting blood sugar levels, resting electrocardiographic results, and thalassemia. This not only enhances the readability of the dataset but also ensures that each column is expressed in a more meaningful and understandable format for downstream analysis. The detail description will be covered in the 'described.html' file.

```{r}
data <- data |> 
  mutate(cp = case_when
         (cp == '1' ~ 'typical angina',
            cp == '2' ~ 'atypical angina',
            cp == '3' ~ 'non-anginal pain',
            cp == '4' ~ 'asymptomatic')) |> 
  mutate(sex = case_when(
    sex == '1' ~ 'male',
    sex == '0' ~ 'female'
  )) |> 
  mutate(exang = case_when(
    exang == '1' ~ 'yes',
    exang == '0' ~ 'no'
  )) |> 
  mutate(slope = case_when(
    slope == '1' ~ 'upsloping',
    slope == '2' ~ 'flat',
    slope == '3' ~ 'downsloping'
  )) |> 
  mutate(fbs = case_when(
    fbs == '1' ~ 'greater than 120mg/ml',
    fbs == '0' ~ 'lower than 120mg/ml'
  )) |> 
  mutate(restecg = case_when(
    restecg == '0' ~ 'normal',
    restecg == '1' ~ 'ST-T wave abnormality',
    restecg == '2' ~ 'left ventricular hypertrophy'
  )) |> 
  mutate(thal = case_when(
    thal == '3' ~ 'normal',
    thal == '6' ~ 'fixed defect',
    thal == '7' ~ 'reversable defect'
  )) 
```

5.  After cleaning the data we write the cleaned and transformed data frame (**`data`**) to a new TSV file named "02_dat_clean.tsv" in the "../data/" directory.

```{r}
readr::write_tsv(data, "../data/02_dat_clean.tsv")
```
